generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String         @id @default(uuid())
  fullName           String
  username           String         @unique
  email              String         @unique
  password           String
  role               Role           @default(USER)
  department         Department?    @relation("UserDepartments", fields: [departmentId], references: [id])
  departmentId       String?
  managedDepartments Department[]   @relation("ManagerDepartment")
  ticketsCreated     Ticket[]       @relation("TicketCreator")
  ticketsAssigned    Ticket[]       @relation("TicketAssignee")
  comments           Comment[]
  chatsSent          ChatMessage[]  @relation("MessageSender")
  chatsReceived      ChatMessage[]  @relation("MessageReceiver")
  notifications      Notification[]
  userSettings       UserSettings?  @relation // Relación con UserSettings
  createdAt          DateTime       @default(now())
  updatedAt          DateTime       @updatedAt
}

enum Role {
  ADMIN
  MANAGER
  USER
}

model Department {
  id        String   @id @default(uuid())
  name      String   @unique
  manager   User?    @relation("ManagerDepartment", fields: [managerId], references: [id]) // Relación nombrada para el manager
  managerId String? // Clave foránea para el manager
  tickets   Ticket[]
  users     User[]   @relation("UserDepartments") // Relación nombrada para los usuarios
  createdAt DateTime @default(now())
}

model Ticket {
  id           String       @id @default(uuid())
  title        String
  description  String
  priority     Priority     @default(MEDIUM)
  status       Status       @default(OPEN)
  creator      User         @relation("TicketCreator", fields: [creatorId], references: [id])
  creatorId    String
  department   Department   @relation(fields: [departmentId], references: [id])
  departmentId String
  assignee     User?        @relation("TicketAssignee", fields: [assigneeId], references: [id])
  assigneeId   String?
  comments     Comment[]
  attachments  Attachment[]
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
}


enum Priority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum Status {
  OPEN
  IN_PROGRESS
  RESOLVED
  CLOSED
}

model Comment {
  id        String   @id @default(uuid())
  content   String
  ticket    Ticket   @relation(fields: [ticketId], references: [id])
  ticketId  String
  author    User     @relation(fields: [authorId], references: [id])
  authorId  String
  createdAt DateTime @default(now())
}

model ChatMessage {
  id         String   @id @default(uuid())
  content    String
  sender     User     @relation("MessageSender", fields: [senderId], references: [id]) // Relación nombrada para el remitente
  senderId   String
  receiver   User     @relation("MessageReceiver", fields: [receiverId], references: [id]) // Relación nombrada para el receptor
  receiverId String
  createdAt  DateTime @default(now())
}

model Notification {
  id        String   @id @default(uuid())
  type      String
  message   String
  read      Boolean  @default(false)
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  relatedId String?
  createdAt DateTime @default(now())
}

model Attachment {
  id        String   @id @default(uuid())
  url       String
  name      String
  type      String
  ticket    Ticket   @relation(fields: [ticketId], references: [id])
  ticketId  String
  createdAt DateTime @default(now())
}

model UserSettings {
  id                   String   @id @default(uuid())
  user                 User     @relation(fields: [userId], references: [id])
  userId               String   @unique
  language             String   @default("en")
  theme                String   @default("light")
  notificationsEnabled Boolean  @default(true)
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
}
